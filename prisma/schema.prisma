// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// User model for authentication
model User {
  id        String   @id @default(cuid())
  email     String   @unique
  phone     String?  @unique
  name      String
  role      UserRole @default(CUSTOMER)
  password  String
  image     String?
  verified  Boolean  @default(false)
  active    Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Customer specific fields
  customer Customer?

  // Admin specific fields
  admin Admin?

  // Delivery rider specific fields
  rider DeliveryRider?

  // Relations
  orders    Order[]
  addresses Address[]
  reviews   Review[]

  @@map("users")
}

model Customer {
  id            String @id @default(cuid())
  userId        String @unique
  user          User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  loyaltyPoints Int    @default(0)
  totalOrders   Int    @default(0)
  totalSpent    Float  @default(0)

  @@map("customers")
}

model Admin {
  id       String    @id @default(cuid())
  userId   String    @unique
  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  level    AdminLevel @default(STAFF)
  permissions Json?

  @@map("admins")
}

model DeliveryRider {
  id           String  @id @default(cuid())
  userId       String  @unique
  user         User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  vehicleType  String?
  licenseNumber String?
  active       Boolean @default(true)
  rating       Float   @default(0)
  totalDeliveries Int  @default(0)

  // Relations
  pickups    Order[] @relation("PickupRider")
  deliveries Order[] @relation("DeliveryRider")

  @@map("delivery_riders")
}

model Address {
  id        String      @id @default(cuid())
  userId    String
  user      User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  type      AddressType @default(HOME)
  title     String
  address   String
  city      String
  area      String
  landmark  String?
  isDefault Boolean     @default(false)
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt

  // Relations
  pickupOrders   Order[] @relation("PickupAddress")
  deliveryOrders Order[] @relation("DeliveryAddress")

  @@map("addresses")
}

model Service {
  id          String   @id @default(cuid())
  name        String
  description String?
  category    String
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  pricing    ServicePricing[]
  orderItems OrderItem[]

  @@map("services")
}

model ServicePricing {
  id        String   @id @default(cuid())
  serviceId String
  service   Service  @relation(fields: [serviceId], references: [id], onDelete: Cascade)
  itemType  String   // e.g., "shirt", "pants", "dress"
  price     Float
  unit      String   @default("piece") // piece, kg, etc.
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([serviceId, itemType])
  @@map("service_pricing")
}

model Order {
  id             String      @id @default(cuid())
  customerId     String
  customer       User        @relation(fields: [customerId], references: [id])
  orderNumber    String      @unique
  status         OrderStatus @default(PENDING)
  totalAmount    Float       @default(0)
  discount       Float       @default(0)
  finalAmount    Float       @default(0)
  paymentStatus  PaymentStatus @default(PENDING)
  paymentMethod  String?
  
  // Pickup details
  pickupAddressId String
  pickupAddress   Address   @relation("PickupAddress", fields: [pickupAddressId], references: [id])
  pickupDate      DateTime?
  pickupTime      String?
  pickupRiderId   String?
  pickupRider     DeliveryRider? @relation("PickupRider", fields: [pickupRiderId], references: [id])
  pickedUpAt      DateTime?
  
  // Delivery details
  deliveryAddressId String
  deliveryAddress   Address   @relation("DeliveryAddress", fields: [deliveryAddressId], references: [id])
  deliveryDate      DateTime?
  deliveryTime      String?
  deliveryRiderId   String?
  deliveryRider     DeliveryRider? @relation("DeliveryRider", fields: [deliveryRiderId], references: [id])
  deliveredAt       DateTime?
  
  // Special instructions
  instructions String?
  
  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  items    OrderItem[]
  tracking OrderTracking[]
  payment  Payment?
  review   Review?

  @@map("orders")
}

model OrderItem {
  id        String  @id @default(cuid())
  orderId   String
  order     Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  serviceId String
  service   Service @relation(fields: [serviceId], references: [id])
  itemType  String
  quantity  Int
  unitPrice Float
  totalPrice Float
  notes     String?

  @@map("order_items")
}

model OrderTracking {
  id        String   @id @default(cuid())
  orderId   String
  order     Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  status    OrderStatus
  message   String
  createdAt DateTime @default(now())

  @@map("order_tracking")
}

model Payment {
  id              String        @id @default(cuid())
  orderId         String        @unique
  order           Order         @relation(fields: [orderId], references: [id], onDelete: Cascade)
  amount          Float
  method          PaymentMethod
  status          PaymentStatus @default(PENDING)
  transactionId   String?
  gateway         String?
  gatewayResponse Json?
  paidAt          DateTime?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  @@map("payments")
}

model Review {
  id        String   @id @default(cuid())
  orderId   String   @unique
  order     Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  customerId String
  customer  User     @relation(fields: [customerId], references: [id])
  rating    Int      // 1-5 stars
  comment   String?
  createdAt DateTime @default(now())

  @@map("reviews")
}

model Settings {
  id    String @id @default(cuid())
  key   String @unique
  value String
  type  String @default("string") // string, number, boolean, json

  @@map("settings")
}

// Enums
enum UserRole {
  CUSTOMER
  ADMIN
  RIDER
}

enum AdminLevel {
  STAFF
  MANAGER
  SUPER_ADMIN
}

enum AddressType {
  HOME
  OFFICE
  OTHER
}

enum OrderStatus {
  PENDING
  CONFIRMED
  PICKED_UP
  IN_PROGRESS
  READY
  OUT_FOR_DELIVERY
  DELIVERED
  CANCELLED
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  REFUNDED
}

enum PaymentMethod {
  CASH
  CARD
  MOBILE_BANKING
  BANK_TRANSFER
}
